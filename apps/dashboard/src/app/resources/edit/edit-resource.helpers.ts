import {
  Classification,
  FieldId,
  Paragraph,
  ParagraphAnnotation,
  UserClassification,
  UserFieldMetadata,
} from '@nuclia/core';

export type EditResourceView = 'profile' | 'classification' | 'add-field';

export interface ParagraphWithTextAndAnnotations extends Paragraph {
  paragraphId: string;
  text?: string;
  // labels added to the paragraph by the user, as well as cancellation of backend labels
  userClassifications: UserClassification[];
  // labels generated by the backend which weren't cancelled by the user
  generatedClassifications: Classification[];
}

export const getUpdatedUserFieldMetadata: (
  field: FieldId,
  annotatedParagraphs: ParagraphWithTextAndAnnotations[],
  existingEntries: UserFieldMetadata[],
) => UserFieldMetadata[] = (
  field: FieldId,
  annotatedParagraphs: ParagraphWithTextAndAnnotations[],
  existingEntries: UserFieldMetadata[],
) => {
  const paragraphAnnotations: ParagraphAnnotation[] = annotatedParagraphs.map((p) => ({
    key: p.paragraphId,
    classifications: p.userClassifications,
  }));

  let existingField = false;
  const newEntries = existingEntries.map((entry) => {
    if (entry.field.field === field.field_id && entry.field.field_type === field.field_type) {
      existingField = true;
      return {
        ...entry,
        paragraphs: paragraphAnnotations,
      };
    } else {
      return entry;
    }
  });

  if (!existingField) {
    newEntries.push({
      field: { field: field.field_id, field_type: field.field_type },
      paragraphs: paragraphAnnotations,
    });
  }
  return newEntries;
};
