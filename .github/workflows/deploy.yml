name: Deploy

on:
  push:
    branches:
      - main

env:
  APP_IMAGE_NAME: app
  LOGIN_IMAGE_NAME: auth
  MANAGER_IMAGE_NAME: manager
  CDN_STORAGE: ${{ secrets.CDN_STORAGE }}
  CONTAINER_REGISTRY: eu.gcr.io/${{ secrets.PROJECT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      deploy-widget: ${{ steps.check-deploy.outputs.deploy-widget }}
      deploy-app: ${{ steps.check-deploy.outputs.deploy-app }}
      deploy-login: ${{ steps.check-deploy.outputs.deploy-login }}
      deploy-manager: ${{ steps.check-deploy.outputs.deploy-manager }}
      deploy-desktop: ${{ steps.check-deploy.outputs.deploy-desktop }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: nrwl/nx-set-shas@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Calculate short sha
        id: env-vars
        run: |-
          HASH=`git rev-parse --short HEAD`
          BRANCH=${GITHUB_REF##*/}
          echo "::set-output name=short_sha::$HASH"
          echo "::set-output name=branch::$BRANCH"

      - name: Install project dependencies
        run: yarn --prefer-offline

      - name: Unit tests
        run: npx nx affected --target=test --parallel=3 --exclude=sdk-demo,search-widget-demo,auth,core

      - name: Build affected apps
        run: npx nx affected --target=build --parallel=3 -c production --exclude=sdk-demo,search-widget-demo,sdk-core

      - name: Check apps to deploy
        id: check-deploy
        run: |-
          (test -d dist/libs/search-widget && echo "::set-output name=deploy-widget::yes") || echo "Widget unchanged"
          (test -d dist/apps/app && echo "::set-output name=deploy-app::yes") || echo "Dashboard unchanged"
          (test -d dist/apps/login && echo "::set-output name=deploy-login::yes") || echo "Login unchanged"
          (test -d dist/apps/manager && echo "::set-output name=deploy-manager::yes") || echo "Manager unchanged"
          (test -d dist/apps/desktop && echo "::set-output name=deploy-desktop::yes") || echo "Desktop unchanged"

      - uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Publish widget
        if: steps.check-deploy.outputs.deploy-widget == 'yes'
        run: |-
          sed -i.bak "s#__NUCLIA_DEV_VERSION__#$GITHUB_SHA#g" dist/libs/search-widget/nuclia-widget.umd.js
          gsutil copy dist/libs/search-widget/nuclia-widget.umd.js gs://$CDN_STORAGE
          gsutil copy -r libs/search-widget/public/i18n gs://$CDN_STORAGE
          gsutil copy -r libs/search-widget/public/icons gs://$CDN_STORAGE

      - name: Build dashboard image
        if: steps.check-deploy.outputs.deploy-app == 'yes'
        run: |-
          docker build -t $CONTAINER_REGISTRY/$APP_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} -f docker/Dockerfile  --build-arg appId=app --build-arg appFolder=app .
          docker tag $CONTAINER_REGISTRY/$APP_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} $CONTAINER_REGISTRY/$APP_IMAGE_NAME:${{ steps.env-vars.outputs.branch }}
          docker push $CONTAINER_REGISTRY/$APP_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}
          docker push $CONTAINER_REGISTRY/$APP_IMAGE_NAME:${{ steps.env-vars.outputs.branch }}

      # - name: Build login image
      #   if: steps.check-deploy.outputs.deploy-login == 'yes'
      #   run: |-
      #     docker build -t $CONTAINER_REGISTRY/$LOGIN_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} -f docker/Dockerfile  --build-arg appId=auth --build-arg appFolder=login/login .
      #     docker tag $CONTAINER_REGISTRY/$LOGIN_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} $CONTAINER_REGISTRY/$LOGIN_IMAGE_NAME:${{ steps.env-vars.outputs.branch }}
      #     docker push $CONTAINER_REGISTRY/$LOGIN_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}
      #     docker push $CONTAINER_REGISTRY/$LOGIN_IMAGE_NAME:${{ steps.env-vars.outputs.branch }}

      - name: Build manager image
        if: steps.check-deploy.outputs.deploy-manager == 'yes'
        run: |-
          docker build -t $CONTAINER_REGISTRY/$MANAGER_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} -f docker/Dockerfile  --build-arg appId=manager --build-arg appFolder=manager .
          docker tag $CONTAINER_REGISTRY/$MANAGER_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} $CONTAINER_REGISTRY/$MANAGER_IMAGE_NAME:${{ steps.env-vars.outputs.branch }}
          docker push $CONTAINER_REGISTRY/$MANAGER_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}
          docker push $CONTAINER_REGISTRY/$MANAGER_IMAGE_NAME:${{ steps.env-vars.outputs.branch }}

  deploy-app:
    name: Deploy dashboard
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.deploy-app == 'yes'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Calculate short sha
        id: env-vars
        run: |-
          HASH=`git rev-parse --short HEAD`
          echo "::set-output name=short_sha::$HASH"

      - name: Set helm package image
        id: version_step
        run: |-
          sed -i.bak "s#IMAGE_TO_REPLACE#$APP_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}#" ./charts/app/values.yaml
          sed -i.bak "s#CONTAINER_REGISTRY_TO_REPLACE#$CONTAINER_REGISTRY#" ./charts/app/values.yaml
          VERSION=`cat apps/app/VERSION`
          VERSION_SHA=$VERSION+${{ steps.env-vars.outputs.short_sha }}
          sed -i.bak "s#99999.99999.99999#$VERSION_SHA#" ./charts/app/Chart.yaml
          echo "::set-output name=version_number::$VERSION_SHA"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v2.0
        with:
          version: v3.4.0

      - name: Push helm package
        run: |-
          helm lint charts/app
          helm package charts/app
          curl --data-binary "@app-${{ steps.version_step.outputs.version_number }}.tgz" ${{ secrets.HELM_CHART_URL }}/api/charts

      - name: Trigger internal Jenkins
        run: |-
          curl -u "${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_KEY }}" --data-urlencode "COMPONENT=app" --data-urlencode "VERSION=${{ steps.version_step.outputs.version_number }}" ${{ secrets.JENKINS_FRONTEND_URL }}/buildWithParameters

  deploy-manager:
    name: Deploy manager
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.deploy-manager == 'yes'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Calculate short sha
        id: env-vars
        run: |-
          HASH=`git rev-parse --short HEAD`
          echo "::set-output name=short_sha::$HASH"

      - name: Set helm package image
        id: version_step
        run: |-
          sed -i.bak "s#IMAGE_TO_REPLACE#$MANAGER_IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}#" ./charts/manager/values.yaml
          sed -i.bak "s#CONTAINER_REGISTRY_TO_REPLACE#$CONTAINER_REGISTRY#" ./charts/manager/values.yaml
          VERSION=`cat apps/manager/VERSION`
          VERSION_SHA=$VERSION+${{ steps.env-vars.outputs.short_sha }}
          sed -i.bak "s#99999.99999.99999#$VERSION_SHA#" ./charts/manager/Chart.yaml
          echo "::set-output name=version_number::$VERSION_SHA"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v2.0
        with:
          version: v3.4.0

      - name: Push helm package
        run: |-
          helm lint charts/manager
          helm package charts/manager
          curl --data-binary "@manager-${{ steps.version_step.outputs.version_number }}.tgz" ${{ secrets.HELM_CHART_URL }}/api/charts

      - name: Trigger internal Jenkins
        run: |-
          curl -u "${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_KEY }}" --data-urlencode "COMPONENT=manager" --data-urlencode "VERSION=${{ steps.version_step.outputs.version_number }}" ${{ secrets.JENKINS_FRONTEND_URL }}/buildWithParameters

  pre-release:
    name: 'Pre Release'
    needs: build
    if: needs.build.outputs.deploy-desktop == 'yes'
    runs-on: 'ubuntu-latest'

    steps:
      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: 'latest'
          prerelease: true
          title: 'Development Build'

  deploy-desktop:
    name: Deploy desktop
    needs: build
    if: needs.build.outputs.deploy-desktop == 'yes'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install project dependencies
        run: yarn --prefer-offline
      - name: Build desktop app
        run: |-
          sed -i.bak "s#__DROPBOX_KEY__#${{ secrets.DROPBOX_KEY }}#g" apps/desktop/src/environments/environment.prod.ts
          npx nx build desktop -c production
      - name: Build electron app
        run: |-
          npx nx build desktop-electron -c production
          mv ./dist/apps/desktop-electron/main.preload.ts.js ./dist/apps/desktop-electron/main.preload.js
      - name: Install the Apple certificate
        if: startsWith(matrix.os, 'macos')
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        run: |-
          mkdir -p ~/private_keys/
          echo '${{ secrets.APPLE_API_SECRET }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8
          echo "APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}" > .env
          echo "APPLE_API_KEY=${{ secrets.APPLE_API_KEY }}" >> .env
      - name: Package and publish electron app
        run: npx nx run desktop-electron:make --publish always
      - name: Release MacOSX installer
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'macos')
        with:
          name: latest
          tag_name: latest
          files: |
            dist/executables/*.dmg
            dist/executables/latest-*.yml
      - name: Release Windows installer
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'windows')
        with:
          name: latest
          tag_name: latest
          files: |
            dist/executables/*.exe
            dist/executables/latest-*.yml
      - name: Release Linux installer
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: latest
          tag_name: latest
          files: |
            dist/executables/*.snap
            dist/executables/latest-*.yml
