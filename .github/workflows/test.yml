name: Test
on:
  pull_request:
    branches:
      - main
  push:
    branches-ignore:
      - main

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - uses: nrwl/nx-set-shas@v2
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - uses: actions/cache@v2
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-
  #     - name: Install project dependencies
  #       run: yarn --prefer-offline
  #     - name: Unit tests
  #       run: npx nx affected --target=test --parallel=3 --exclude=sdk-demo,search-widget-demo,auth,core
  #     - name: Check if build succeeds
  #       run: npx nx affected --target=build --parallel=3 -c production --exclude=sdk-demo,search-widget-demo,sdk-core
  pre-release:
    name: 'Pre Release'
    runs-on: 'ubuntu-latest'

    steps:
      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: 'latest'
          prerelease: true
          title: 'Development Build'

  deploy-desktop:
    name: Deploy desktop
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install project dependencies
        run: yarn --prefer-offline
      - name: Build desktop app
        run: npx nx build desktop -c production
      - name: Build electron app
        run: |-
          npx nx build desktop-electron -c production
          mv ./dist/apps/desktop-electron/main.preload.ts.js ./dist/apps/desktop-electron/main.preload.js
      - name: Install the Apple certificate
        if: startsWith(matrix.os, 'macos')
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        run: |-
          mkdir -p ~/private_keys/
          echo '${{ secrets.APPLE_API_SECRET }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8
          echo "APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}" > .env
          echo "APPLE_API_KEY=${{ secrets.APPLE_API_KEY }}" >> .env
      - name: Package and publish electron app
        run: npx nx run desktop-electron:make --publish always
      - name: Release MacOSX installer
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'macos')
        with:
          name: latest
          tag_name: v1.0.0-alpha1
          files: dist/executables/*.dmg
      - name: Release Windows installer
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'windows')
        with:
          name: latest
          tag_name: v1.0.0-alpha1
          files: dist/executables/*.exe
      - name: Release Linux installer
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: latest
          tag_name: v1.0.0-alpha1
          files: dist/executables/*.snap
